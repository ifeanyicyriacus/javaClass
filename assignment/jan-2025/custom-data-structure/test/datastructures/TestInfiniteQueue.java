package datastructures;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.*;public class TestInfiniteQueue {    InfiniteQueue queue;    int capacity = 5;    @BeforeEach    public void setUp() {        queue = new InfiniteQueue(capacity);    }    @Test    public void testInfiniteQueue_isEmpty() {        assertTrue(queue.isEmpty());    }    @Test    public void testInfiniteQueue_canHoldElements() {        assertTrue(queue.isEmpty());        assertEquals(0, queue.size());        queue.add("Akin");        queue.add("Ben");        assertEquals(2, queue.size());        assertTrue(queue.contains("Akin"));        assertFalse(queue.isEmpty());    }    @Test    public void testInfiniteQueue_showsFirstElementWithoutDeleting() {        queue.add("Akin");        queue.add("Ben");        assertEquals(2, queue.size());        assertEquals("Akin", queue.peek());        assertEquals(2, queue.size());    }    @Test    public void testInfiniteQueue_canRemoveElement() {        queue.add("Akin");        queue.add("Ben");        assertEquals(2, queue.size());        assertEquals("Akin", queue.peek());        assertEquals("Akin", queue.remove());        assertFalse(queue.contains("Akin"));        assertEquals(1, queue.size());        assertEquals("Ben", queue.peek());    }    @Test    public void testInfiniteQueue_popReturnNullWhenEmpty(){        assertTrue(queue.isEmpty());        assertNull(queue.remove());    }    @Test    public void testInfiniteQueue_throwRuntimeException_Expect_RuntimeException(){        assertEquals(5, queue.capacity);        assertEquals(0, queue.size());        queue.add("Terve");        queue.add("Hi");        queue.add("Hyva");        queue.add("Herra");        queue.add("Pollonen");        assertEquals(5, queue.size());        assertThrowsExactly(IllegalStateException.class, () -> queue.add("Hello"));    }}