package datastructures;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.*;public class TestInfiniteQueue {    InfiniteQueue queue;    int capacity = 5;    @BeforeEach    public void setUp() {        queue = new InfiniteQueue(capacity);    }    @Test    public void testInfiniteQueue_isEmpty() {        assertTrue(queue.isEmpty());    }    @Test    public void testInfiniteQueue_canHoldElements() {        assertTrue(queue.isEmpty());        assertEquals(0, queue.size());        queue.add("Akin");        queue.add("Ben");        assertEquals(2, queue.size());        assertTrue(queue.contains("Akin"));        assertFalse(queue.isEmpty());    }    @Test    public void testInfiniteQueue_showsFirstElementWithoutDeleting() {        queue.add("Akin");        queue.add("Ben");        assertEquals(2, queue.size());        assertEquals("Akin", queue.peek());        assertEquals(2, queue.size());    }    @Test    public void testInfiniteQueue_canRemoveElement() {        queue.add("Akin");        queue.add("Ben");        assertEquals(2, queue.size());        assertEquals("Akin", queue.peek());        assertEquals("Akin", queue.remove());        assertFalse(queue.contains("Akin"));        assertEquals(1, queue.size());        assertEquals("Ben", queue.peek());    }    @Test    public void testInfiniteQueue_popReturnNullWhenEmpty(){        assertTrue(queue.isEmpty());        assertNull(queue.remove());    }    @Test    public void testInfiniteQueue_throwRuntimeException_Expect_RuntimeException(){        assertEquals(5, queue.capacity);        assertEquals(0, queue.size());        queue.add("Terve");        queue.add("Hi");        queue.add("Hyva");        queue.add("Herra");        queue.add("Pollonen");        assertEquals(5, queue.size());        assertThrowsExactly(IllegalStateException.class, () -> queue.add("Hello"));    }    @Test    public void testInfiniteQueue_canHandleSeveralRemovalAndAddition(){        assertEquals(5, queue.capacity);        assertEquals(0, queue.size());        queue.add("Terve");        assertArrayEquals(queue.listBucket, new String[]{"Terve" ,null , null, null, null});        queue.add("Hi");        assertArrayEquals(queue.listBucket, new String[]{"Terve" ,"Hi", null, null, null});        queue.add("Hyva");        assertArrayEquals(queue.listBucket, new String[]{"Terve" ,"Hi", "Hyva", null, null});        queue.add("Herra");        assertArrayEquals(queue.listBucket, new String[]{"Terve" ,"Hi", "Hyva", "Herra", null});        queue.add("Pollonen");        assertArrayEquals(queue.listBucket, new String[]{"Terve" ,"Hi", "Hyva", "Herra", "Pollonen"});        assertEquals(5, queue.size());        assertTrue(queue.isFull());        assertArrayEquals(queue.listBucket, new String[]{"Terve" ,"Hi", "Hyva", "Herra", "Pollonen"});        assertThrowsExactly(IllegalStateException.class, () -> queue.add("Hello"));        assertArrayEquals(queue.listBucket, new String[]{"Terve" ,"Hi", "Hyva", "Herra", "Pollonen"});        assertEquals("Terve", queue.remove());        assertArrayEquals(queue.listBucket, new String[]{null, "Hi", "Hyva", "Herra", "Pollonen"});        assertEquals("Hi", queue.peek());        assertEquals(4, queue.size());        assertEquals("Hi", queue.remove());        assertArrayEquals(queue.listBucket, new String[]{null, null, "Hyva", "Herra", "Pollonen"});        assertEquals("Hyva", queue.remove());        assertArrayEquals(queue.listBucket, new String[]{null, null, null, "Herra", "Pollonen"});        assertEquals(2, queue.size());        queue.add("boy");        assertEquals(3, queue.size());        assertArrayEquals(queue.listBucket, new String[]{"boy", null, null, "Herra", "Pollonen"});        assertEquals("Herra", queue.peek());        assertEquals("Herra", queue.remove());        assertEquals("Pollonen", queue.remove());        assertEquals("boy", queue.remove());        assertArrayEquals(queue.listBucket, new String[]{null, null, null, null, null});        assertTrue(queue.isEmpty());    }}